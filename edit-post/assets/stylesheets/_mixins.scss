/**
 * Breakpoint mixins
 */

@mixin break-huge() {
	@media (min-width: #{ ($break-huge) }) {
		@content;
	}
}

@mixin break-wide() {
	@media (min-width: #{ ($break-wide) }) {
		@content;
	}
}

@mixin break-large() {
	@media (min-width: #{ ($break-large) }) {
		@content;
	}
}

@mixin break-medium() {
	@media (min-width: #{ ($break-medium) }) {
		@content;
	}
}

@mixin break-small() {
	@media (min-width: #{ ($break-small) }) {
		@content;
	}
}

@mixin break-mobile() {
	@media (min-width: #{ ($break-mobile) }) {
		@content;
	}
}


/**
 * Long content fade mixin
 *
 * Creates a fading overlay to signify that the content is longer
 * than the space allows.
 */

@mixin long-content-fade($direction: right, $size: 20%, $color: #fff, $edge: 0, $z-index: false) {
	content: "";
	display: block;
	position: absolute;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	pointer-events: none;

	@if $z-index {
		z-index: $z-index;
	}

	@if $direction == "bottom" {
		background: linear-gradient(to top, rgba($color, 0), $color 90%);
		left: $edge;
		right: $edge;
		top: $edge;
		bottom: calc(100% - $size);
		width: auto;
	}

	@if $direction == "top" {
		background: linear-gradient(to bottom, rgba($color, 0), $color 90%);
		top: calc(100% - $size);
		left: $edge;
		right: $edge;
		bottom: $edge;
		width: auto;
	}

	@if $direction == "left" {
		background: linear-gradient(to left, rgba($color, 0), $color 90%);
		top: $edge;
		left: $edge;
		bottom: $edge;
		right: auto;
		width: $size;
		height: auto;
	}

	@if $direction == "right" {
		background: linear-gradient(to right, rgba($color, 0), $color 90%);
		top: $edge;
		bottom: $edge;
		right: $edge;
		left: auto;
		width: $size;
		height: auto;
	}
}

/**
 * Button states and focus styles
 */

@mixin appearance-button {
	display: inline-flex;
	text-decoration: none;
	padding: 5px 10px;
	margin: 0;
	border: 0;
	cursor: pointer;
	-webkit-appearance: none;
	white-space: nowrap;
	border-radius: $radius-round-rectangle;
	border: 1px solid #ccc;
	background: #f7f7f7;
	box-shadow: inset 0 -1px 0 #ccc;
	color: #555;

	&:hover {
		background: #fafafa;
		border-color: #999;
		box-shadow: inset 0 -1px 0 #999;
		color: #23282d;
	}

	&:focus:not(:disabled):not([aria-disabled="true"]) {
		background: #fafafa;
		color: #23282d;
		border-color: #999;
		box-shadow:
			inset 0 -1px 0 #999,
			0 0 0 2px $blue-medium-200;
	}

	&:active {
		color: currentColor;

		&:not(:disabled):not([aria-disabled="true"]) {
			background: #eee;
			border-color: #999;
			box-shadow: inset 0 1px 0 #999;
		}
	}

	&:disabled,
	&[disabled] {
		color: #a0a5aa;
		border-color: #ddd;
		background: #f7f7f7;
		box-shadow: none;
		text-shadow: 0 1px 0 #fff;
		cursor: default;
		opacity: 0.3;
	}

	&.is-unstyled {
		padding: 0;
		border-radius: 0;
		border: none;
		background: none;
		color: inherit;

		&:hover,
		&:active,
		&:focus:not(:disabled):not([aria-disabled="true"]),
		&:active:not(:disabled):not([aria-disabled="true"]),
		&:disabled,
		&[disabled] {
			background: none;
			color: inherit;
			text-shadow: none;
			opacity: 1;
		}
	}

	&.is-borderless {
		color: inherit;
		border-color: none;
		background: none;
		box-shadow: none;

		&:not(:disabled):not([aria-disabled="true"]) {
			&:focus {
				@include button-style__focus-active;
			}

			&:hover {
				@include button-style__hover;
			}

			&:active {
				@include button-style__active;
			}
		}
	}

	&.is-primary {
		background: color(theme(button));
		border-color: color(theme(button) shade(20%)) color(theme(button) shade(25%)) color(theme(button) shade(25%));
		box-shadow: inset 0 -1px 0 color(theme(button) shade(25%));
		color: $white;
		text-decoration: none;
		text-shadow:
			0 -1px 1px color(theme(button) shade(30%)),
			1px 0 1px color(theme(button) shade(30%)),
			0 1px 1px color(theme(button) shade(30%)),
			-1px 0 1px color(theme(button) shade(30%));

		&:hover,
		&:focus:not(:disabled):not([aria-disabled="true"]) {
			background: color(theme(button) shade(5%));
			border-color: color(theme(button) shade(50%));
			box-shadow: inset 0 -1px 0 color(theme(button) shade(50%));
			color: $white;
		}

		&:focus:not(:disabled):not([aria-disabled="true"]) {
			box-shadow:
				inset 0 -1px 0 color(theme(button) shade(50%)),
				0 0 0 2px $blue-medium-200;
		}

		&:active:not(:disabled):not([aria-disabled="true"]) {
			background: color(theme(button) shade(20%));
			border-color: color(theme(button) shade(50%));
			box-shadow: inset 0 1px 0 color(theme(button) shade(50%));
			vertical-align: top;
		}

		&:disabled,
		&[disabled] {
			color: color(theme(button) tint(30%));
			background: color(theme(button) shade(30%));
			border-color: color(theme(button) shade(20%));
			box-shadow: none;
			text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);
		}

		&.is-busy,
		&.is-primary.is-busy[disabled] {
			color: $white;
			background-size: 100px 100%;
			// Disable reason: This function call looks nicer when each argument is on its own line.
			/* stylelint-disable */
			background-image: linear-gradient(
				-45deg,
				theme(primary) 28%,
				color(theme(primary) shade(30%)) 28%,
				color(theme(primary) shade(30%)) 72%,
				theme(primary) 72%
			);
			/* stylelint-enable */
			border-color: color(theme(primary) shade(50%));
		}
	}

	&.is-busy,
	&.is-busy[disabled] {
		animation: appearance-button-busy-animation 2500ms infinite linear;
		background-size: 100px 100%;
		background-image: repeating-linear-gradient(-45deg, $light-gray-500, $white 11px, $white 10px, $light-gray-500 20px);
		opacity: 1;
	}

	&.is-large {
		height: 30px;
		line-height: 28px;
		padding: 0 12px 2px;
	}

	&.is-small {
		height: 24px;
		line-height: 22px;
		padding: 0 8px 1px;
		font-size: 11px;
	}
}

@mixin appearance-link {
	margin: 0;
	padding: 0;
	box-shadow: none;
	border: 0;
	border-radius: 0;
	background: none;
	outline: none;
	text-align: left;
	/* Mimics the default link style in common.css */
	color: #0073aa;
	text-decoration: underline;
	transition-property: border, background, color;
	transition-duration: 0.05s;
	transition-timing-function: ease-in-out;

	&:hover,
	&:active {
		color: #00a0d2;
	}

	&:focus {
		color: #124964;
		box-shadow:
			0 0 0 1px #5b9dd9,
			0 0 2px 1px rgba(30, 140, 190, 0.8);
	}
}

// Buttons with rounded corners.
@mixin button-style__disabled {
	opacity: 0.6;
	cursor: default;
}

@mixin button-style__hover {
	background-color: $white;
	color: $dark-gray-900;
	box-shadow: inset 0 0 0 1px $light-gray-500, inset 0 0 0 2px $white, 0 1px 1px rgba($dark-gray-900, 0.2);
}

@mixin button-style__active() {
	outline: none;
	background-color: $white;
	color: $dark-gray-900;
	box-shadow: inset 0 0 0 1px $light-gray-700, inset 0 0 0 2px $white;
}

@mixin button-style__focus-active() {
	background-color: $white;
	color: $dark-gray-900;
	box-shadow: inset 0 0 0 1px $dark-gray-300, inset 0 0 0 2px $white;

	// Windows High Contrast mode will show this outline, but not the box-shadow.
	outline: 2px solid transparent;
	outline-offset: -2px;
}

// Switch.
@mixin switch-style__focus-active() {
	box-shadow: 0 0 0 2px $white, 0 0 0 3px $dark-gray-300;

	// Windows High Contrast mode will show this outline, but not the box-shadow.
	outline: 2px solid transparent;
	outline-offset: 2px;
}

// Formatting Buttons.
@mixin formatting-button-style__hover {
	color: $dark-gray-500;
	box-shadow: inset 0 0 0 1px $dark-gray-500, inset 0 0 0 2px $white;
}

@mixin formatting-button-style__active() {
	outline: none;
	color: $white;
	box-shadow: none;
	background: $dark-gray-500;
}

@mixin formatting-button-style__focus() {
	box-shadow: inset 0 0 0 1px $dark-gray-500, inset 0 0 0 2px $white;

	// Windows High Contrast mode will show this outline, but not the box-shadow.
	outline: 2px solid transparent;
	outline-offset: -2px;
}

// Tabs, Inputs, Square buttons.
@mixin input-style__neutral() {
	box-shadow: 0 0 0 transparent;
	transition: box-shadow 0.1s linear;
	border-radius: $radius-round-rectangle;
	border: $border-width solid $dark-gray-150;
}

@mixin input-style__focus() {
	color: $dark-gray-900;
	border-color: $blue-medium-500;
	box-shadow: 0 0 0 1px $blue-medium-500;

	// Windows High Contrast mode will show this outline, but not the box-shadow.
	outline: 2px solid transparent;
	outline-offset: -2px;
}

// Square buttons.
@mixin square-style__neutral() {
	outline-offset: -1px;
}

@mixin square-style__focus() {
	color: $dark-gray-900;
	outline: 1px solid $dark-gray-300;
	box-shadow: none;
}

// Menu items.
@mixin menu-style__neutral() {
	border: none;
	box-shadow: none;
}

@mixin menu-style__focus() {
	color: $dark-gray-900;
	border: none;
	box-shadow: none;
	outline-offset: -2px;
	outline: 1px dotted $dark-gray-500;
}

// Blocks in the Library.
@mixin block-style__disabled {
	opacity: 0.6;
	cursor: default;
}

@mixin block-style__hover {
	background: $light-gray-100;
	color: $dark-gray-900;
}

@mixin block-style__focus-active() {
	color: $dark-gray-900;
	box-shadow: 0 0 0 2px $blue-medium-500;

	// Windows High Contrast mode will show this outline, but not the box-shadow.
	outline: 2px solid transparent;
	outline-offset: -2px;
}

/**
 * Applies editor left position to the selector passed as argument
 */

@mixin editor-left($selector) {
	#{$selector} { /* Set left position when auto-fold is not on the body element. */
		left: 0;

		@include break-medium() {
			left: $admin-sidebar-width;
		}
	}

	.auto-fold #{$selector} { /* Auto fold is when on smaller breakpoints, nav menu auto colllapses. */
		@include break-medium() {
			left: $admin-sidebar-width-collapsed;
		}

		@include break-large() {
			left: $admin-sidebar-width;
		}
	}

	/* Sidebar manually collapsed. */
	.folded #{$selector} {
		left: 0;

		@include break-medium() {
			left: $admin-sidebar-width-collapsed;
		}
	}

	/* Mobile menu opened. */
	@media (max-width: #{ ($break-medium) }) {
		.auto-fold .wp-responsive-open #{$selector} {
			left: $admin-sidebar-width-big;
		}
	}

	/* In small screens with resposive menu expanded there is small white space. */
	@media (max-width: #{ ($break-small) }) {
		.auto-fold .wp-responsive-open #{$selector} {
			margin-left: -18px;
		}
	}

	body.is-fullscreen-mode #{$selector} {
		left: 0 !important;
	}
}

/**
 * Applies editor right position to the selector passed as argument
 */

@mixin editor-right($selector) {
	#{ $selector } {
		right: 0;
	}

	.edit-post-layout.is-sidebar-opened #{ $selector } {
		right: $sidebar-width;
	}
}


/**
 * Styles that are reused verbatim in a few places
 */

@mixin caption-style() {
	margin-top: 0.5em;
	margin-bottom: 1em;
	color: $dark-gray-300;
	text-align: center;
	font-size: $default-font-size;
}
